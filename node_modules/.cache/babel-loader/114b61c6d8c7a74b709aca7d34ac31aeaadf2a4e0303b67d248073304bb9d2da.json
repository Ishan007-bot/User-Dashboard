{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ishan Ganguly\\\\OneDrive\\\\Desktop\\\\internship dashboard\\\\src\\\\context\\\\EmployeeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeContext = /*#__PURE__*/createContext();\nexport const useEmployees = () => {\n  _s();\n  const context = useContext(EmployeeContext);\n  if (!context) {\n    throw new Error('useEmployees must be used within an EmployeeProvider');\n  }\n  return context;\n};\n_s(useEmployees, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const EmployeeProvider = ({\n  children\n}) => {\n  _s2();\n  const [employees, setEmployees] = useState([{\n    id: 1,\n    name: 'Darrell Steward',\n    email: 'darrell.steward@company.com',\n    role: 'Admin',\n    department: 'Engineering',\n    status: 'Active',\n    startDate: '2023-01-15'\n  }, {\n    id: 2,\n    name: 'Albert Flores',\n    email: 'albert.flores@company.com',\n    role: 'User',\n    department: 'Marketing',\n    status: 'Active',\n    startDate: '2023-03-20'\n  }, {\n    id: 3,\n    name: 'Leslie Alexander',\n    email: 'leslie.alexander@company.com',\n    role: 'Intern',\n    department: 'Design',\n    status: 'Inactive',\n    startDate: '2023-06-10'\n  }, {\n    id: 4,\n    name: 'Cameron Williamson',\n    email: 'cameron.williamson@company.com',\n    role: 'User',\n    department: 'Sales',\n    status: 'Active',\n    startDate: '2023-02-28'\n  }, {\n    id: 5,\n    name: 'Jenny Wilson',\n    email: 'jenny.wilson@company.com',\n    role: 'Admin',\n    department: 'HR',\n    status: 'Active',\n    startDate: '2023-01-10'\n  }]);\n  const [editingEmployee, setEditingEmployee] = useState(null);\n\n  // Add new employee\n  const addEmployee = employeeData => {\n    const newEmployee = {\n      ...employeeData,\n      id: Date.now(),\n      // Simple ID generation\n      startDate: employeeData.startDate || new Date().toISOString().split('T')[0]\n    };\n    setEmployees(prev => [...prev, newEmployee]);\n    return newEmployee;\n  };\n\n  // Update existing employee\n  const updateEmployee = (id, updatedData) => {\n    setEmployees(prev => prev.map(emp => emp.id === id ? {\n      ...emp,\n      ...updatedData\n    } : emp));\n    setEditingEmployee(null);\n  };\n\n  // Delete employee\n  const deleteEmployee = id => {\n    setEmployees(prev => prev.filter(emp => emp.id !== id));\n  };\n\n  // Get employee by ID\n  const getEmployeeById = id => {\n    return employees.find(emp => emp.id === id);\n  };\n\n  // Set employee for editing\n  const setEmployeeForEdit = employee => {\n    setEditingEmployee(employee);\n  };\n\n  // Clear editing state\n  const clearEditing = () => {\n    setEditingEmployee(null);\n  };\n  const value = {\n    employees,\n    editingEmployee,\n    addEmployee,\n    updateEmployee,\n    deleteEmployee,\n    getEmployeeById,\n    setEmployeeForEdit,\n    clearEditing\n  };\n  return /*#__PURE__*/_jsxDEV(EmployeeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s2(EmployeeProvider, \"gsXhOxOCKS1S2e/mlRbTnO/jtNw=\");\n_c = EmployeeProvider;\nvar _c;\n$RefreshReg$(_c, \"EmployeeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","EmployeeContext","useEmployees","_s","context","Error","EmployeeProvider","children","_s2","employees","setEmployees","id","name","email","role","department","status","startDate","editingEmployee","setEditingEmployee","addEmployee","employeeData","newEmployee","Date","now","toISOString","split","prev","updateEmployee","updatedData","map","emp","deleteEmployee","filter","getEmployeeById","find","setEmployeeForEdit","employee","clearEditing","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ishan Ganguly/OneDrive/Desktop/internship dashboard/src/context/EmployeeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst EmployeeContext = createContext();\r\n\r\nexport const useEmployees = () => {\r\n  const context = useContext(EmployeeContext);\r\n  if (!context) {\r\n    throw new Error('useEmployees must be used within an EmployeeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const EmployeeProvider = ({ children }) => {\r\n  const [employees, setEmployees] = useState([\r\n    {\r\n      id: 1,\r\n      name: 'Darrell Steward',\r\n      email: 'darrell.steward@company.com',\r\n      role: 'Admin',\r\n      department: 'Engineering',\r\n      status: 'Active',\r\n      startDate: '2023-01-15'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Albert Flores',\r\n      email: 'albert.flores@company.com',\r\n      role: 'User',\r\n      department: 'Marketing',\r\n      status: 'Active',\r\n      startDate: '2023-03-20'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Leslie Alexander',\r\n      email: 'leslie.alexander@company.com',\r\n      role: 'Intern',\r\n      department: 'Design',\r\n      status: 'Inactive',\r\n      startDate: '2023-06-10'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Cameron Williamson',\r\n      email: 'cameron.williamson@company.com',\r\n      role: 'User',\r\n      department: 'Sales',\r\n      status: 'Active',\r\n      startDate: '2023-02-28'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Jenny Wilson',\r\n      email: 'jenny.wilson@company.com',\r\n      role: 'Admin',\r\n      department: 'HR',\r\n      status: 'Active',\r\n      startDate: '2023-01-10'\r\n    }\r\n  ]);\r\n\r\n  const [editingEmployee, setEditingEmployee] = useState(null);\r\n\r\n  // Add new employee\r\n  const addEmployee = (employeeData) => {\r\n    const newEmployee = {\r\n      ...employeeData,\r\n      id: Date.now(), // Simple ID generation\r\n      startDate: employeeData.startDate || new Date().toISOString().split('T')[0]\r\n    };\r\n    setEmployees(prev => [...prev, newEmployee]);\r\n    return newEmployee;\r\n  };\r\n\r\n  // Update existing employee\r\n  const updateEmployee = (id, updatedData) => {\r\n    setEmployees(prev => \r\n      prev.map(emp => \r\n        emp.id === id ? { ...emp, ...updatedData } : emp\r\n      )\r\n    );\r\n    setEditingEmployee(null);\r\n  };\r\n\r\n  // Delete employee\r\n  const deleteEmployee = (id) => {\r\n    setEmployees(prev => prev.filter(emp => emp.id !== id));\r\n  };\r\n\r\n  // Get employee by ID\r\n  const getEmployeeById = (id) => {\r\n    return employees.find(emp => emp.id === id);\r\n  };\r\n\r\n  // Set employee for editing\r\n  const setEmployeeForEdit = (employee) => {\r\n    setEditingEmployee(employee);\r\n  };\r\n\r\n  // Clear editing state\r\n  const clearEditing = () => {\r\n    setEditingEmployee(null);\r\n  };\r\n\r\n  const value = {\r\n    employees,\r\n    editingEmployee,\r\n    addEmployee,\r\n    updateEmployee,\r\n    deleteEmployee,\r\n    getEmployeeById,\r\n    setEmployeeForEdit,\r\n    clearEditing\r\n  };\r\n\r\n  return (\r\n    <EmployeeContext.Provider value={value}>\r\n      {children}\r\n    </EmployeeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}